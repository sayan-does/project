Folder: src

File: src\App.tsx
Content:
import React, { useState } from 'react';
import axios from 'axios';
import { Message } from './types';
import { ChatMessage } from './components/ChatMessage';
import { ChatInput } from './components/ChatInput';
import { NotebookUploader } from './components/NotebookUploader';
import { Radio, Zap, BookOpen } from 'lucide-react';

const BASE_URL = 'http://localhost:5000';

// API service for handling backend requests
export const apiService = {
  uploadDocument: async (file: File, userId: string = 'default_user') => {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('user_id', userId);

    try {
      const response = await axios.post(`${BASE_URL}/upload`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      return response.data;
    } catch (error) {
      console.error('Upload failed:', error);
      throw error;
    }
  },

  processQuery: async (query: string, userId: string = 'default_user') => {
    try {
      const response = await axios.post(`${BASE_URL}/query`, {
        query,
        user_id: userId,
      });
      return response.data;
    } catch (error) {
      console.error('Query processing failed:', error);
      throw error;
    }
  },

  generateLLMText: async (prompt: string, maxLength: number = 200) => {
    try {
      const response = await axios.post(`${BASE_URL}/llm_text`, {
        prompt,
        max_length: maxLength,
      });
      return response.data;
    } catch (error) {
      console.error('LLM text generation failed:', error);
      throw error;
    }
  },
};

function App() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: "Hey punk! Ready to study? Drop your notebooks and let's get started! ðŸ¤˜",
      sender: 'bot',
      timestamp: new Date(),
    },
  ]);

  const handleSendMessage = async (content: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, newMessage]);

    try {
      const response = await apiService.processQuery(content);
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: response.answer || "I'm still rocking out your request! ðŸŽ¸",
        sender: 'bot',
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botResponse]);
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 2).toString(),
        content: "Oops! Something went wrong while processing your request. ðŸ˜ž",
        sender: 'bot',
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Header */}
      <header className="bg-gray-800 border-b border-pink-500">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Radio className="w-8 h-8 text-pink-500" />
              <h1 className="text-2xl font-bold">PunkStudy</h1>
            </div>
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <Zap className="text-yellow-500" />
                <span>AI Powered</span>
              </div>
              <div className="flex items-center gap-2">
                <BookOpen className="text-pink-500" />
                <span>Study Smarter</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Chat Section */}
          <div className="lg:col-span-2 bg-gray-800 rounded-xl p-4 h-[600px] flex flex-col">
            {/* Messages */}
            <div className="flex-1 overflow-y-auto mb-4 space-y-4">
              {messages.map((message) => (
                <ChatMessage key={message.id} message={message} />
              ))}
            </div>

            {/* Input */}
            <ChatInput onSend={handleSendMessage} />
          </div>

          {/* Uploader Section */}
          <div className="space-y-4">
            <div className="bg-gray-800 rounded-xl p-4">
              <h2 className="text-xl font-bold mb-4">Upload Your Notes</h2>
              <NotebookUploader uploadHandler={apiService.uploadDocument} />
            </div>

            <div className="bg-gray-800 rounded-xl p-4">
              <h2 className="text-xl font-bold mb-4">Study Tips</h2>
              <ul className="space-y-2 text-gray-300">
                <li className="flex items-center gap-2">
                  <span className="w-2 h-2 bg-pink-500 rounded-full"></span>
                  Upload your study materials
                </li>
                <li className="flex items-center gap-2">
                  <span className="w-2 h-2 bg-pink-500 rounded-full"></span>
                  Ask questions about your notes
                </li>
                <li className="flex items-center gap-2">
                  <span className="w-2 h-2 bg-pink-500 rounded-full"></span>
                  Get AI-powered explanations
                </li>
                <li className="flex items-center gap-2">
                  <span className="w-2 h-2 bg-pink-500 rounded-full"></span>
                  Practice with generated quizzes
                </li>
              </ul>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;


--------------------------------------------------------------------------------
File: src\index.css
Content:
@tailwind base;
@tailwind components;
@tailwind utilities;

::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #1f2937;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: #ec4899;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #db2777;
}

--------------------------------------------------------------------------------
File: src\main.tsx
Content:
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


--------------------------------------------------------------------------------
Subfolders:
- src\components
- src\types

================================================================================
Folder: src\components

File: src\components\ChatInput.tsx
Content:
import React, { useState } from 'react';
import { Send } from 'lucide-react';

interface ChatInputProps {
  onSend: (message: string) => void;
}

export const ChatInput: React.FC<ChatInputProps> = ({ onSend }) => {
  const [message, setMessage] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (message.trim()) {
      onSend(message);
      setMessage('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex gap-2">
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder="Ask anything about your notes..."
        className="flex-1 px-4 py-2 rounded-full bg-gray-800 text-white placeholder-gray-400 
          focus:outline-none focus:ring-2 focus:ring-pink-500"
      />
      <button
        type="submit"
        className="p-2 rounded-full bg-pink-600 text-white hover:bg-pink-700 
          transition-colors disabled:opacity-50"
        disabled={!message.trim()}
      >
        <Send size={20} />
      </button>
    </form>
  );
}

--------------------------------------------------------------------------------
File: src\components\ChatMessage.tsx
Content:
import React from 'react';
import { Message } from '../types';
import { Bot, User } from 'lucide-react';

interface ChatMessageProps {
  message: Message;
}

export const ChatMessage: React.FC<ChatMessageProps> = ({ message }) => {
  const isBot = message.sender === 'bot';
  
  return (
    <div className={`flex gap-3 ${isBot ? 'flex-row' : 'flex-row-reverse'} mb-4`}>
      <div className={`w-8 h-8 rounded-full flex items-center justify-center
        ${isBot ? 'bg-purple-600' : 'bg-pink-600'}`}>
        {isBot ? <Bot size={18} className="text-white" /> : <User size={18} className="text-white" />}
      </div>
      <div className={`max-w-[80%] rounded-2xl px-4 py-2 ${
        isBot ? 'bg-gray-800 text-white' : 'bg-pink-600 text-white'
      }`}>
        <p className="text-sm">{message.content}</p>
      </div>
    </div>
  );
}

--------------------------------------------------------------------------------
File: src\components\NotebookUploader.tsx
Content:
import React, { useState } from 'react';
import { Upload, Loader2 } from 'lucide-react';

interface NotebookUploaderProps {
  uploadHandler: (file: File) => Promise<any>;
}

export const NotebookUploader: React.FC<NotebookUploaderProps> = ({ uploadHandler }) => {
  const [isDragging, setIsDragging] = useState(false);
  const [isUploading, setIsUploading] = useState(false);

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    if (isUploading) return; // Prevent multiple uploads at once

    const file = e.dataTransfer.files[0]; // Only handle the first file for simplicity
    if (!file) return;

    setIsUploading(true);
    try {
      await uploadHandler(file);
      alert('Upload successful!');
    } catch (error) {
      console.error('File upload failed:', error);
      alert('Upload failed. Please try again.');
    } finally {
      setIsUploading(false);
    }
  };

  const handleFileInput = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsUploading(true);
    try {
      await uploadHandler(file);
      alert('Upload successful!');
    } catch (error) {
      console.error('File upload failed:', error);
      alert('Upload failed. Please try again.');
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
      className={`border-2 border-dashed rounded-lg p-8 text-center transition-all
        ${isDragging ? 'border-pink-500 bg-pink-50' : 'border-gray-300'}
        ${isUploading ? 'opacity-50' : 'hover:border-pink-500'}`}
    >
      {isUploading ? (
        <div className="flex flex-col items-center gap-2">
          <Loader2 className="w-8 h-8 animate-spin text-pink-600" />
          <p className="text-gray-600">Uploading your notebook...</p>
        </div>
      ) : (
        <label className="flex flex-col items-center gap-2 cursor-pointer">
          <Upload className="w-8 h-8 text-gray-400" />
          <p className="text-gray-600">Drop your notebook here or click to upload</p>
          <p className="text-sm text-gray-500">Supports PDF, DOCX, TXT</p>
          <input
            type="file"
            className="hidden"
            onChange={handleFileInput}
            accept=".pdf,.docx,.txt"
          />
        </label>
      )}
    </div>
  );
};


--------------------------------------------------------------------------------
Folder: src\types

